# Generated by Django 4.1.7 on 2025-05-07 20:50

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("assets", "0003_initial"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("policies", "0001_initial"),
        ("products", "0001_initial"),
        ("users", "0001_initial"),
        ("integrations", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="Graph",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255)),
                ("description", models.TextField(blank=True)),
                (
                    "graph_type",
                    models.CharField(
                        choices=[
                            ("product", "Product Graph"),
                            ("dependency", "Dependency Graph"),
                            ("security", "Security Visualization"),
                            ("infrastructure", "Infrastructure Map"),
                            ("compliance", "Compliance Status"),
                            ("ai_governance", "AI Governance Map"),
                        ],
                        default="product",
                        max_length=50,
                    ),
                ),
                (
                    "graph_data",
                    models.JSONField(
                        help_text="Graph structure and visualization data"
                    ),
                ),
                (
                    "layout_algorithm",
                    models.CharField(default="force-directed", max_length=100),
                ),
                (
                    "last_generated",
                    models.DateTimeField(
                        auto_now=True, help_text="When the graph was last generated"
                    ),
                ),
                (
                    "visibility",
                    models.CharField(
                        choices=[
                            ("private", "Private (Owner Only)"),
                            ("organization", "Organization"),
                            ("public", "Public"),
                        ],
                        default="organization",
                        max_length=20,
                    ),
                ),
                (
                    "is_snapshot",
                    models.BooleanField(
                        default=False,
                        help_text="Whether this is a point-in-time snapshot",
                    ),
                ),
                ("snapshot_timestamp", models.DateTimeField(blank=True, null=True)),
                ("metadata", models.JSONField(blank=True, default=dict)),
                ("tags", models.JSONField(blank=True, default=list)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="created_visualizations",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "organization",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="graphs",
                        to="users.organization",
                    ),
                ),
                (
                    "product",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="graphs",
                        to="products.productcatalog",
                    ),
                ),
                (
                    "repositories",
                    models.ManyToManyField(
                        blank=True,
                        related_name="visualizations",
                        to="integrations.gitrepository",
                    ),
                ),
            ],
            options={
                "verbose_name": "Graph",
                "verbose_name_plural": "Graphs",
                "db_table": "graph",
                "ordering": ["-updated_at"],
            },
        ),
        migrations.CreateModel(
            name="SecurityVisualization",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255)),
                ("description", models.TextField(blank=True)),
                (
                    "visualization_type",
                    models.CharField(
                        choices=[
                            ("risk_map", "Risk Heatmap"),
                            ("compliance", "Compliance Status"),
                            ("attack_paths", "Attack Paths"),
                            ("vulnerability", "Vulnerability Map"),
                            ("security_posture", "Security Posture"),
                            ("ai_risk", "AI Risk Visualization"),
                        ],
                        max_length=50,
                    ),
                ),
                (
                    "visualization_data",
                    models.JSONField(
                        help_text="Specialized security visualization data"
                    ),
                ),
                ("is_public", models.BooleanField(default=False)),
                ("last_updated", models.DateTimeField(auto_now=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="created_security_visualizations",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "organization",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="users.organization",
                    ),
                ),
                (
                    "policies",
                    models.ManyToManyField(
                        blank=True,
                        related_name="visualizations",
                        to="policies.securitypolicy",
                    ),
                ),
                (
                    "products",
                    models.ManyToManyField(
                        blank=True,
                        related_name="security_visualizations",
                        to="products.productcatalog",
                    ),
                ),
                (
                    "source_graph",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="security_visualizations",
                        to="visualization.graph",
                    ),
                ),
            ],
            options={
                "verbose_name": "Security Visualization",
                "verbose_name_plural": "Security Visualizations",
                "db_table": "security_visualization",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="GraphNode",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255)),
                ("display_name", models.CharField(blank=True, max_length=255)),
                (
                    "node_type",
                    models.CharField(
                        choices=[
                            ("component", "Software Component"),
                            ("service", "Service"),
                            ("database", "Database"),
                            ("storage", "Storage"),
                            ("compute", "Compute Resource"),
                            ("function", "Serverless Function"),
                            ("ai_model", "AI Model"),
                            ("external", "External Service"),
                            ("custom", "Custom"),
                        ],
                        max_length=50,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("normal", "Normal"),
                            ("warning", "Warning"),
                            ("critical", "Critical"),
                            ("inactive", "Inactive"),
                        ],
                        default="normal",
                        max_length=20,
                    ),
                ),
                ("properties", models.JSONField(default=dict)),
                ("position_x", models.FloatField(default=0)),
                ("position_y", models.FloatField(default=0)),
                ("size", models.FloatField(default=1.0)),
                ("icon", models.CharField(blank=True, max_length=100)),
                ("custom_style", models.JSONField(blank=True, default=dict)),
                ("is_expandable", models.BooleanField(default=False)),
                ("is_expanded", models.BooleanField(default=False)),
                (
                    "has_issues",
                    models.BooleanField(
                        default=False,
                        help_text="Whether this node has security/compliance issues",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "cloud_resource",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="integrations.cloudresource",
                    ),
                ),
                (
                    "component",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="graph_nodes",
                        to="assets.softwarecomponent",
                    ),
                ),
                (
                    "graph",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="nodes",
                        to="visualization.graph",
                    ),
                ),
            ],
            options={
                "verbose_name": "Graph Node",
                "verbose_name_plural": "Graph Nodes",
                "db_table": "graph_node",
                "ordering": ["graph", "name"],
            },
        ),
        migrations.CreateModel(
            name="GraphEdge",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "edge_type",
                    models.CharField(
                        choices=[
                            ("depends", "Depends On"),
                            ("calls", "Calls"),
                            ("contains", "Contains"),
                            ("deploys", "Deploys"),
                            ("accesses", "Accesses"),
                            ("generates", "Generates"),
                            ("secures", "Secures"),
                            ("monitors", "Monitors"),
                            ("custom", "Custom"),
                        ],
                        max_length=50,
                    ),
                ),
                ("label", models.CharField(blank=True, max_length=100)),
                ("weight", models.FloatField(default=1.0)),
                (
                    "security_status",
                    models.CharField(
                        choices=[
                            ("secure", "Secure"),
                            ("warning", "Warning"),
                            ("vulnerable", "Vulnerable"),
                            ("unknown", "Unknown"),
                        ],
                        default="unknown",
                        max_length=20,
                    ),
                ),
                ("properties", models.JSONField(blank=True, default=dict)),
                ("custom_style", models.JSONField(blank=True, default=dict)),
                ("is_bidirectional", models.BooleanField(default=False)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "graph",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="edges",
                        to="visualization.graph",
                    ),
                ),
                (
                    "source",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="outgoing_edges",
                        to="visualization.graphnode",
                    ),
                ),
                (
                    "target",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="incoming_edges",
                        to="visualization.graphnode",
                    ),
                ),
            ],
            options={
                "verbose_name": "Graph Edge",
                "verbose_name_plural": "Graph Edges",
                "db_table": "graph_edge",
                "ordering": ["graph", "source"],
            },
        ),
        migrations.CreateModel(
            name="Dashboard",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255)),
                ("description", models.TextField(blank=True)),
                (
                    "dashboard_type",
                    models.CharField(
                        choices=[
                            ("security", "Security Dashboard"),
                            ("compliance", "Compliance Dashboard"),
                            ("performance", "Performance Dashboard"),
                            ("operations", "Operations Dashboard"),
                            ("ai_governance", "AI Governance Dashboard"),
                            ("custom", "Custom Dashboard"),
                        ],
                        default="security",
                        max_length=50,
                    ),
                ),
                (
                    "layout",
                    models.JSONField(help_text="Dashboard layout configuration"),
                ),
                (
                    "widgets",
                    models.JSONField(
                        default=list, help_text="Widgets configuration and settings"
                    ),
                ),
                ("is_default", models.BooleanField(default=False)),
                ("is_public", models.BooleanField(default=False)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "organization",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="dashboards",
                        to="users.organization",
                    ),
                ),
                (
                    "owner",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="dashboards",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "products",
                    models.ManyToManyField(
                        blank=True,
                        related_name="dashboards",
                        to="products.productcatalog",
                    ),
                ),
                (
                    "shared_with",
                    models.ManyToManyField(
                        blank=True,
                        related_name="shared_dashboards",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Dashboard",
                "verbose_name_plural": "Dashboards",
                "db_table": "visualization_dashboard",
                "ordering": ["-created_at"],
            },
        ),
        migrations.AddIndex(
            model_name="securityvisualization",
            index=models.Index(
                fields=["organization", "visualization_type"],
                name="security_vi_organiz_0704ae_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="securityvisualization",
            index=models.Index(
                fields=["created_by"], name="security_vi_created_1358a9_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="graphnode",
            index=models.Index(
                fields=["graph", "node_type"], name="graph_node_graph_i_5f3352_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="graphnode",
            index=models.Index(
                fields=["component"], name="graph_node_compone_63dd9d_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="graphnode",
            index=models.Index(fields=["status"], name="graph_node_status_d83233_idx"),
        ),
        migrations.AddIndex(
            model_name="graphedge",
            index=models.Index(
                fields=["graph", "edge_type"], name="graph_edge_graph_i_bc0112_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="graphedge",
            index=models.Index(
                fields=["source", "target"], name="graph_edge_source__983d96_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="graphedge",
            index=models.Index(
                fields=["security_status"], name="graph_edge_securit_562b23_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="graph",
            index=models.Index(
                fields=["organization", "graph_type"], name="graph_organiz_583441_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="graph",
            index=models.Index(fields=["product"], name="graph_product_d011be_idx"),
        ),
        migrations.AddIndex(
            model_name="graph",
            index=models.Index(fields=["created_by"], name="graph_created_974275_idx"),
        ),
        migrations.AddIndex(
            model_name="dashboard",
            index=models.Index(
                fields=["organization", "dashboard_type"],
                name="visualizati_organiz_cc48c7_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="dashboard",
            index=models.Index(fields=["owner"], name="visualizati_owner_i_703b72_idx"),
        ),
        migrations.AddIndex(
            model_name="dashboard",
            index=models.Index(
                fields=["is_default"], name="visualizati_is_defa_728a1d_idx"
            ),
        ),
    ]
