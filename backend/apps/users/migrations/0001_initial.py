# Generated by Django 4.1.7 on 2025-05-07 20:50

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("email", models.EmailField(max_length=254, unique=True)),
                ("first_name", models.CharField(blank=True, max_length=255, null=True)),
                ("last_name", models.CharField(blank=True, max_length=255, null=True)),
                ("password", models.CharField(blank=True, max_length=255)),
                ("is_active", models.BooleanField(default=True)),
                ("is_staff", models.BooleanField(default=False)),
                ("is_superuser", models.BooleanField(default=False)),
                (
                    "user_type",
                    models.CharField(
                        choices=[
                            ("business", "Business User"),
                            ("consumer", "Consumer User"),
                            ("partner", "Partner"),
                            ("admin", "Administrator"),
                        ],
                        default="consumer",
                        max_length=20,
                    ),
                ),
                ("job_title", models.CharField(blank=True, max_length=100)),
                ("department", models.CharField(blank=True, max_length=100)),
                ("business_phone", models.CharField(blank=True, max_length=20)),
                (
                    "preferences",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="User preferences for personalization",
                    ),
                ),
                (
                    "subscription_tier",
                    models.CharField(blank=True, default="free", max_length=50),
                ),
                (
                    "auth_providers",
                    models.JSONField(
                        blank=True,
                        default=list,
                        help_text="List of auth providers used by this user",
                    ),
                ),
                ("last_login", models.DateTimeField(blank=True, null=True)),
                ("login_count", models.IntegerField(default=0)),
                ("onboarding_completed", models.BooleanField(default=False)),
                ("is_verified", models.BooleanField(default=False)),
                (
                    "date_joined",
                    models.DateTimeField(default=django.utils.timezone.now),
                ),
            ],
            options={
                "verbose_name": "User",
                "verbose_name_plural": "Users",
                "db_table": "user",
                "ordering": ["-date_joined"],
            },
        ),
        migrations.CreateModel(
            name="Organization",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255)),
                ("slug", models.SlugField(unique=True)),
                ("description", models.TextField(blank=True)),
                ("website", models.URLField(blank=True)),
                (
                    "org_type",
                    models.CharField(
                        choices=[
                            ("enterprise", "Enterprise"),
                            ("smb", "Small/Medium Business"),
                            ("startup", "Startup"),
                            ("partner", "Partner Organization"),
                            ("education", "Educational Institution"),
                            ("government", "Government"),
                            ("nonprofit", "Non-profit"),
                        ],
                        default="enterprise",
                        max_length=20,
                    ),
                ),
                ("industry", models.CharField(blank=True, max_length=100)),
                (
                    "size_range",
                    models.CharField(
                        blank=True,
                        help_text="Organization size range (e.g., '1-10', '11-50', etc.)",
                        max_length=50,
                    ),
                ),
                ("billing_email", models.EmailField(blank=True, max_length=254)),
                ("subscription_plan", models.CharField(default="free", max_length=50)),
                (
                    "subscription_status",
                    models.CharField(default="active", max_length=20),
                ),
                ("max_users", models.IntegerField(default=5)),
                ("address", models.TextField(blank=True)),
                ("phone", models.CharField(blank=True, max_length=20)),
                ("settings", models.JSONField(blank=True, default=dict)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "Organization",
                "verbose_name_plural": "Organizations",
                "db_table": "users_organization",
            },
        ),
        migrations.CreateModel(
            name="Role",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255)),
                ("permissions", models.JSONField()),
            ],
            options={
                "verbose_name": "Role",
                "verbose_name_plural": "Roles",
                "db_table": "users_role",
            },
        ),
        migrations.CreateModel(
            name="SubscriptionPlan",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100)),
                ("code", models.CharField(max_length=50, unique=True)),
                ("description", models.TextField()),
                (
                    "plan_type",
                    models.CharField(
                        choices=[
                            ("business", "Business Plan"),
                            ("consumer", "Consumer Plan"),
                        ],
                        max_length=20,
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                (
                    "is_public",
                    models.BooleanField(
                        default=True, help_text="Whether the plan is publicly visible"
                    ),
                ),
                ("price", models.DecimalField(decimal_places=2, max_digits=10)),
                ("currency", models.CharField(default="USD", max_length=3)),
                (
                    "billing_cycle",
                    models.CharField(
                        choices=[
                            ("monthly", "Monthly"),
                            ("quarterly", "Quarterly"),
                            ("annual", "Annual"),
                            ("custom", "Custom"),
                        ],
                        default="monthly",
                        max_length=20,
                    ),
                ),
                (
                    "features",
                    models.JSONField(help_text="Features included in this plan"),
                ),
                ("limits", models.JSONField(help_text="Usage limits for this plan")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "Subscription Plan",
                "verbose_name_plural": "Subscription Plans",
                "db_table": "subscription_plan",
                "ordering": ["plan_type", "price"],
            },
        ),
        migrations.CreateModel(
            name="UserSubscription",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("active", "Active"),
                            ("trialing", "Trial Period"),
                            ("past_due", "Past Due"),
                            ("canceled", "Canceled"),
                            ("unpaid", "Unpaid"),
                            ("paused", "Paused"),
                        ],
                        default="active",
                        max_length=20,
                    ),
                ),
                ("start_date", models.DateTimeField()),
                ("end_date", models.DateTimeField(blank=True, null=True)),
                ("trial_end", models.DateTimeField(blank=True, null=True)),
                (
                    "billing_cycle_anchor",
                    models.DateTimeField(help_text="Next billing date"),
                ),
                ("payment_provider", models.CharField(blank=True, max_length=50)),
                (
                    "payment_provider_id",
                    models.CharField(
                        blank=True,
                        help_text="ID in payment provider system",
                        max_length=255,
                    ),
                ),
                ("is_auto_renew", models.BooleanField(default=True)),
                ("metadata", models.JSONField(blank=True, default=dict)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "organization",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="subscriptions",
                        to="users.organization",
                    ),
                ),
                (
                    "plan",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="subscribers",
                        to="users.subscriptionplan",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="subscriptions",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "User Subscription",
                "verbose_name_plural": "User Subscriptions",
                "db_table": "user_subscription",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="UserFeedback",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "feedback_type",
                    models.CharField(
                        choices=[
                            ("bug", "Bug Report"),
                            ("feature", "Feature Request"),
                            ("usability", "Usability Issue"),
                            ("general", "General Feedback"),
                            ("nps", "NPS Rating"),
                        ],
                        max_length=20,
                    ),
                ),
                ("content", models.TextField()),
                (
                    "rating",
                    models.IntegerField(
                        blank=True,
                        help_text="Rating on a scale (e.g., 1-10)",
                        null=True,
                    ),
                ),
                (
                    "page_url",
                    models.CharField(
                        blank=True,
                        help_text="URL where feedback was given",
                        max_length=255,
                    ),
                ),
                ("user_agent", models.TextField(blank=True)),
                ("is_resolved", models.BooleanField(default=False)),
                ("resolved_at", models.DateTimeField(blank=True, null=True)),
                ("resolution_notes", models.TextField(blank=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "resolved_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="resolved_feedback",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="feedback",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "User Feedback",
                "verbose_name_plural": "User feedback",
                "db_table": "user_feedback",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="Token",
            fields=[
                ("token", models.TextField()),
                (
                    "key",
                    models.CharField(max_length=255, primary_key=True, serialize=False),
                ),
                ("expires", models.DateTimeField()),
                ("refresh_token", models.CharField(max_length=255, unique=True)),
                ("refresh_expires", models.DateTimeField()),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Token",
                "verbose_name_plural": "Tokens",
                "db_table": "token",
            },
        ),
        migrations.CreateModel(
            name="Team",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255)),
                ("description", models.TextField(blank=True)),
                (
                    "is_default",
                    models.BooleanField(
                        default=False,
                        help_text="Whether new members are automatically added",
                    ),
                ),
                (
                    "permissions",
                    models.JSONField(
                        blank=True, default=dict, help_text="Team-specific permissions"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "leader",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="led_teams",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "members",
                    models.ManyToManyField(
                        related_name="teams", to=settings.AUTH_USER_MODEL
                    ),
                ),
                (
                    "organization",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="teams",
                        to="users.organization",
                    ),
                ),
            ],
            options={
                "verbose_name": "Team",
                "verbose_name_plural": "Teams",
                "db_table": "team",
                "ordering": ["organization", "name"],
            },
        ),
        migrations.AddIndex(
            model_name="subscriptionplan",
            index=models.Index(
                fields=["plan_type", "is_active"], name="subscriptio_plan_ty_ee24db_idx"
            ),
        ),
        migrations.AddField(
            model_name="organization",
            name="account_manager",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="managed_organizations",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="organization",
            name="primary_contact",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="primary_contact_for",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="user",
            name="groups",
            field=models.ManyToManyField(
                blank=True,
                help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                related_name="user_set",
                related_query_name="user",
                to="auth.group",
                verbose_name="groups",
            ),
        ),
        migrations.AddField(
            model_name="user",
            name="organization",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="members",
                to="users.organization",
            ),
        ),
        migrations.AddField(
            model_name="user",
            name="user_permissions",
            field=models.ManyToManyField(
                blank=True,
                help_text="Specific permissions for this user.",
                related_name="user_set",
                related_query_name="user",
                to="auth.permission",
                verbose_name="user permissions",
            ),
        ),
        migrations.AddIndex(
            model_name="usersubscription",
            index=models.Index(fields=["user"], name="user_subscr_user_id_43eb8b_idx"),
        ),
        migrations.AddIndex(
            model_name="usersubscription",
            index=models.Index(
                fields=["organization"], name="user_subscr_organiz_2a0e7c_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="usersubscription",
            index=models.Index(fields=["status"], name="user_subscr_status_2fc1f9_idx"),
        ),
        migrations.AddIndex(
            model_name="team",
            index=models.Index(fields=["organization"], name="team_organiz_1e968d_idx"),
        ),
        migrations.AddIndex(
            model_name="user",
            index=models.Index(fields=["email"], name="user_email_7bbb4c_idx"),
        ),
    ]
