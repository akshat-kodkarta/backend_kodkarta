# Generated by Django 4.1.7 on 2025-05-07 20:50

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):
    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="CloudResource",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "resource_id",
                    models.CharField(
                        help_text="Cloud provider's resource ID", max_length=255
                    ),
                ),
                ("name", models.CharField(max_length=255)),
                (
                    "cloud_provider",
                    models.CharField(
                        help_text="Name of the cloud provider", max_length=50
                    ),
                ),
                (
                    "type",
                    models.CharField(
                        choices=[
                            ("compute", "Compute Resource"),
                            ("storage", "Storage Resource"),
                            ("database", "Database Resource"),
                            ("network", "Network Resource"),
                            ("serverless", "Serverless Function"),
                            ("container", "Container Service"),
                            ("ai", "AI Service"),
                            ("security", "Security Service"),
                            ("other", "Other"),
                        ],
                        max_length=50,
                    ),
                ),
                (
                    "specific_type",
                    models.CharField(
                        help_text="Provider-specific resource type", max_length=100
                    ),
                ),
                (
                    "location",
                    models.CharField(
                        help_text="Region/zone of the resource", max_length=255
                    ),
                ),
                ("status", models.CharField(default="active", max_length=50)),
                (
                    "configuration",
                    models.JSONField(
                        default=dict, help_text="Resource configuration data"
                    ),
                ),
                (
                    "tags",
                    models.JSONField(
                        blank=True, default=dict, help_text="Resource tags"
                    ),
                ),
                (
                    "security_score",
                    models.FloatField(
                        blank=True, help_text="Security assessment score", null=True
                    ),
                ),
                ("last_accessed_at", models.DateTimeField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "Cloud Resource",
                "verbose_name_plural": "Cloud Resources",
                "db_table": "cloud_resource",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="DataSource",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255)),
                ("description", models.TextField(blank=True)),
                (
                    "type",
                    models.CharField(
                        choices=[
                            ("github", "GitHub"),
                            ("gitlab", "GitLab"),
                            ("azure", "Azure"),
                            ("aws", "AWS"),
                            ("gcp", "Google Cloud"),
                            ("kubernetes", "Kubernetes"),
                            ("bitbucket", "Bitbucket"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "credentials",
                    models.TextField(
                        help_text="Encrypted credentials for the data source"
                    ),
                ),
                (
                    "credentials_metadata",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Non-sensitive metadata about the credentials",
                    ),
                ),
                (
                    "connection_status",
                    models.CharField(
                        choices=[
                            ("active", "Active"),
                            ("failed", "Failed"),
                            ("pending", "Pending Authorization"),
                            ("disconnected", "Disconnected"),
                        ],
                        default="pending",
                        max_length=20,
                    ),
                ),
                ("last_scan_at", models.DateTimeField(blank=True, null=True)),
                (
                    "scan_frequency",
                    models.IntegerField(
                        default=24, help_text="Scan frequency in hours"
                    ),
                ),
                (
                    "integration_data",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Additional integration-specific data",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "Data Source",
                "verbose_name_plural": "Data Sources",
                "db_table": "data_source",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="GitRepository",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255)),
                (
                    "full_name",
                    models.CharField(
                        help_text="Full repository name with owner/org", max_length=512
                    ),
                ),
                ("url", models.URLField()),
                ("clone_url", models.URLField()),
                ("description", models.TextField(blank=True)),
                ("default_branch", models.CharField(default="main", max_length=100)),
                (
                    "visibility",
                    models.CharField(
                        choices=[
                            ("public", "Public"),
                            ("private", "Private"),
                            ("internal", "Internal"),
                        ],
                        default="private",
                        max_length=20,
                    ),
                ),
                (
                    "provider",
                    models.CharField(
                        help_text="Git provider (GitHub, GitLab, etc.)", max_length=50
                    ),
                ),
                (
                    "owner",
                    models.CharField(
                        help_text="Repository owner/organization name", max_length=255
                    ),
                ),
                ("last_scanned_at", models.DateTimeField(blank=True, null=True)),
                ("last_commit_at", models.DateTimeField(blank=True, null=True)),
                (
                    "security_insights",
                    models.JSONField(
                        blank=True, default=dict, help_text="Security assessment data"
                    ),
                ),
                ("repository_metadata", models.JSONField(blank=True, default=dict)),
                ("has_security_issues", models.BooleanField(default=False)),
                ("is_archived", models.BooleanField(default=False)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "data_source",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="git_repositories",
                        to="integrations.datasource",
                    ),
                ),
            ],
            options={
                "verbose_name": "Git Repository",
                "verbose_name_plural": "Git repositories",
                "db_table": "git_repository",
                "ordering": ["-created_at"],
            },
        ),
    ]
