"""
Django settings for mindPsy project.

Generated by 'django-admin startproject' using Django 4.2.3.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""
from datetime import timedelta
import pyrebase
from dotenv import load_dotenv, dotenv_values
from pathlib import Path
import os
from mongoengine import connect
import sys

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent.parent
dotenv_path = os.path.join(BASE_DIR, '.env')
load_dotenv(dotenv_path)



sys.path.insert(0, str(BASE_DIR))

config = dotenv_values(".env")


ROOT_URLCONF = 'mindPsy.urls'
ROOT_URLCONF = os.getenv("ROOT_URLCONF", "mindPsy.urls")
connect(host=os.getenv('DB_HOST'))
MONGODB_DATABASES = {
    "default": {
        "name": os.getenv("DB_NAME"),
        "host": os.getenv("DB_HOST"),
        "username": os.getenv("DB_USERNAME"),
        "password": os.getenv("DB_PASSWORD"),
        "authentication_source": os.getenv("DB_AUTH_SOURCE"),
        "tz_aware": True,
        "ssl": True,
    }
}



# Django Databases Configuration
DATABASES = {
    'default': {  # Postgres as primary database
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': config['POSTGRES_DB'],
        'USER': config['POSTGRES_USER'],
        'PASSWORD': config['POSTGRES_PASSWORD'],
        'HOST': config['POSTGRES_HOST'],
        'PORT': config['POSTGRES_PORT'],
        'OPTIONS': {
            'sslmode': 'prefer',
        },
    },
}
import os

SWAGGER_USERNAME = os.getenv("SWAGGER_USERNAME")
SWAGGER_PASSWORD = os.getenv("SWAGGER_PASSWORD")


TIME_ZONE = 'Europe/London'  # Set the timezone to London
USE_TZ = True




# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv("SECRET_KEY")
if not SECRET_KEY:
    raise ValueError("SECRET_KEY environment variable is not set")

try:
    config = {
        "apiKey": os.getenv("FIREBASE_API_KEY"),
        "authDomain": os.getenv("FIREBASE_AUTH_DOMAIN"),
        "databaseURL": os.getenv("FIREBASE_DATABASE_URL"),
        "storageBucket": os.getenv("FIREBASE_STORAGE_BUCKET"),
        "projectId": os.getenv("FIREBASE_PROJECT_ID"),
        "appId": os.getenv("FIREBASE_APP_ID"),
    }
    firebase = pyrebase.initialize_app(config)
    auth = firebase.auth()
except Exception:
    raise Exception(
        "Firebase configuration credentials not found. Please add the configuration to the environment variables."
    )



SERVER_BASE_URL = os.getenv("SERVER_URL")

ALLOWED_HOSTS = [ "api.mindpsy.co.uk"]  # HTTP://mindPsy.com or ip

# ALLOWED_HOSTS = os.getenv("ALLOWED_HOSTS", "").split(",")


# Application definition

INSTALLED_APPS = [
    "apps.mindPsy_app",
    "apps.metaData",
    "apps.healthUpdate",
    "apps.chatApp", 
    "apps.timeslots_app",
    "apps.user_modelling",
    # "core",
    # 'apps.dashboard.apps.DashboardConfig',
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "corsheaders",
    "rest_framework",
    "rest_framework_simplejwt",
    "rest_framework_mongoengine",
    "rest_framework.authtoken",
    "django_mongoengine",
    "django_mongoengine.mongo_auth",
    "django_mongoengine.mongo_admin",
    "django.contrib.sites",
    "allauth",
    "allauth.account",
    "allauth.socialaccount",
    "allauth.socialaccount.providers.google",
    'drf_yasg',
    "drf_spectacular",
    'drf_spectacular_sidecar', 
]

SPECTACULAR_SETTINGS = {
    'TITLE': 'MindPsy API',
    'DESCRIPTION': 'API documentation for MindPsy application',
    'VERSION': '1.0.0',
    'SERVE_INCLUDE_SCHEMA': True,
    'SWAGGER_UI_DIST': 'SIDECAR',
    'SWAGGER_UI_FAVICON_HREF': 'SIDECAR',
    'REDOC_DIST': 'SIDECAR',
    'SCHEMA_PATH_PREFIX': '/',
    'SCHEMA_COERCE_PATH_PK_SUFFIX': True,
    'COMPONENT_SPLIT_REQUEST': True,
    
    # Added required OpenAPI specification
    'OPENAPI_VERSION': '3.0.3',
    'SWAGGER_SETTINGS': {
        'SECURITY_DEFINITIONS': {
            'Api-Key': {
                'type': 'apiKey',
                'in': 'header',
                'name': 'Authorization'
            }
        }
    },
    
    'CONTACT': {
        'name': 'API Support',
        'url': 'https://www.mindpsy.com/support/',
        'email': 'support@mindpsy.com'
    },
    'LICENSE': {
        'name': 'BSD License',
        'url': 'https://opensource.org/licenses/BSD-3-Clause'
    },
    'SERVERS': [
        {'url': '/', 'description': 'Local Development server'},
        {'url': 'https://mindpsybackend.azurewebsites.net/', 'description': 'Production server'}
    ],
    'TAGS': [
        {'name': 'Authentication', 'description': 'Authentication endpoints'},
        {'name': 'User', 'description': 'User management endpoints'},
    ],
    'SWAGGER_UI_SETTINGS': {
        'deepLinking': True,
        'persistAuthorization': True,
        'displayOperationId': True,
        'defaultModelsExpandDepth': -1,
        'defaultModelExpandDepth': 3,
        'defaultModelRendering': 'model',
        'displayRequestDuration': True,
        'docExpansion': 'list',
        'filter': True,
        'showExtensions': True,
        'showCommonExtensions': True,
        'tryItOutEnabled': True
    },
    'REDOC_UI_SETTINGS': {
        'hideDownloadButton': False,
        'hideHostname': False,
        'expandResponses': '200,201',
        'pathInMiddlePanel': True,
        'requiredPropsFirst': True,
        'sortPropsAlphabetically': True
    },
    'PREPROCESSING_HOOKS': [],
    'POSTPROCESSING_HOOKS': [],
    'ENUM_NAME_OVERRIDES': {}
}


SWAGGER_API_KEY = os.getenv("mindpys_docs")

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "allauth.account.middleware.AccountMiddleware",
    'mindPsy.middleware.SwaggerAuthMiddleware', 
]

AUTHENTICATION_BACKENDS = (
    # "apps.mindPsy_app.auth_backend.MongoAuthBackend",
    "django.contrib.auth.backends.ModelBackend",
    "allauth.account.auth_backends.AuthenticationBackend",
    "django_mongoengine.mongo_auth.backends.MongoEngineBackend",
)

REST_FRAMEWORK = {
    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "apps.mindPsy_app.firebase_auth.firebase_authentication.FirebaseAuthentication",
        "rest_framework.authentication.SessionAuthentication",
        "apps.mindPsy_app.utils.authentication.TokenAuthentication",
    ),
    "DEFAULT_PERMISSION_CLASSES": [
        "rest_framework.permissions.IsAuthenticated",
    ],
}



AUTH_USER_MODEL = "mindPsy_app.User"

# email settings
EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
EMAIL_HOST = os.getenv("EMAIL_HOST")
EMAIL_PORT = os.getenv("EMAIL_PORT")
EMAIL_USE_TLS = True
EMAIL_HOST_USER = os.getenv("EMAIL_HOST_USER")
EMAIL_HOST_PASSWORD = os.getenv("EMAIL_HOST_PASSWORD")
DEFAULT_FROM_EMAIL = os.getenv("EMAIL_FROM")

SOCIALACCOUNT_PROVIDERS = {
    "google": {
        "SCOPE": [
            "profile",
            "email",
        ],
        "AUTH_PARAMS": {
            "access_type": "online",
        },
    }
}

SITE_ID = 1

# Add your Google client ID and secret
# SOCIAL_AUTH_GOOGLE_OAUTH2_KEY = '<your-client-id>'
# SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET = '<your-client-secret>'


CORS_ORIGIN_ALLOW_ALL = True
CSRF_TRUSTED_ORIGINS = [
    os.getenv("SERVER_URL"),
    os.getenv("BASE_URL"),
    'https://api.mindpsy.co.uk',
]

CSRF_COOKIE_DOMAIN = '.mindpsy.co.uk'

CSRF_COOKIE_SECURE = True
SESSION_COOKIE_SECURE = True
SECURE_SSL_REDIRECT = True
DEBUG=False
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
USE_X_FORWARDED_HOST = True

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [os.path.join(BASE_DIR, "templates")],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "mindPsy.wsgi.application"


# MongoEngine specific settings


MONGODB_HOST = os.getenv("DB_HOST")
MONGODB_PORT = 27017  # or whatever port your MongoDB is running on
MONGODB_DATABASE = os.getenv("DB_NAME")


SESSION_ENGINE = "django_mongoengine.sessions"
SESSION_COOKIE_AGE = 86400  # 24 hours in seconds
SESSION_COOKIE_NAME = 'mindpsy_sessionid'
SESSION_COOKIE_SAMESITE = 'Lax'
SESSION_COOKIE_HTTPONLY = True
SESSION_SAVE_EVERY_REQUEST = True


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True

STATICFILES_FINDERS = [
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',

]
# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = '/static/'

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
STATIC_ROOT = os.path.join(BASE_DIR, 'static/')
# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Add these settings
LOGIN_URL = 'swagger-login'
LOGIN_REDIRECT_URL = 'docs'

# Add this to your settings to make trailing slashes optional
# APPEND_SLASH = True


CELERY_BROKER_URL = "redis://localhost:6379/0"
CELERY_RESULT_BACKEND = "redis://localhost:6379/1"
CELERY_ACCEPT_CONTENT = ["json"]
CELERY_TASK_SERIALIZER = "json"
CELERY_WORKER_HIJACK_ROOT_LOGGER = False  # Add this line

LOG_DIR = os.path.join(BASE_DIR, "logs")
os.makedirs(LOG_DIR, exist_ok=True)


LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "verbose": {
            "format": "[{asctime}] {levelname} {name} {message}",
            "style": "{",
        },
    },
    "handlers": {
        "console": {
            "class": "logging.StreamHandler",
            "formatter": "verbose",
            "level": "INFO"
        },
        "file": {
            "class": "logging.FileHandler",
            "filename": os.path.join(LOG_DIR, "application.log"),
            "formatter": "verbose",
            "level": "INFO"
        },
        "celery_file": {  # Add a specific handler for Celery
            "class": "logging.FileHandler",
            "filename": os.path.join(LOG_DIR, "celery.log"),
            "formatter": "verbose",
            "level": "INFO"
        },
    },
    "root": {
        "handlers": ["console", "file"],
        "level": "INFO",
    },
    "loggers": {  
        "celery": {
            "handlers": ["celery_file", "console"],
            "level": "INFO",
            "propagate": False,
        },
        "celery.task": {
            "handlers": ["celery_file"],
            "level": "INFO",
            "propagate": False,
        },
        "celery.worker": {
            "handlers": ["celery_file"],
            "level": "INFO",
            "propagate": False,
        },
    },
}

from celery.signals import setup_logging

@setup_logging.connect
def config_loggers(*args, **kwargs):
    from logging.config import dictConfig
    dictConfig(LOGGING)

from celery.schedules import crontab

CELERY_BEAT_SCHEDULE = {
    'centroid-every-10-minutes': {
        'task': 'apps.user_modelling.tasks.process_centroid_batch',
        'schedule': crontab(minute='*/10'),
    },
    'daily-pipeline-5pm': {
        'task': 'apps.user_modelling.tasks.run_daily_pipeline',
        'schedule': crontab(hour=17, minute=0),
    },
}



